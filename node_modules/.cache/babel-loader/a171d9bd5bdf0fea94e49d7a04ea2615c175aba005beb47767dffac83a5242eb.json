{"ast":null,"code":"import _slicedToArray from\"D:/Research_Project/Component/Sample/RPT_103/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState,useRef}from\"react\";// Import 'useRef'\nimport{Line}from\"react-chartjs-2\";import Chart from\"chart.js/auto\";// Note: Using 'auto' will include all necessary components\nimport{jsx as _jsx}from\"react/jsx-runtime\";var HWGraph=function HWGraph(_ref){var chartRefs=_ref.chartRefs;// Initialize state to store graph data with height, weight, and step\nvar _useState=useState({height:[],weight:[],step:[]}),_useState2=_slicedToArray(_useState,2),graphData=_useState2[0],setGraphData=_useState2[1];// Use useRef to hold a reference to the chart\nvar chartRef=useRef(null);useEffect(function(){// Fetch data from your Flask API\n// Update the 'graphData' state with the retrieved data\nfetch(\"http://localhost:5000/predictions\").then(function(response){return response.json();}).then(function(result){var predictions=result.predictions;// Extract height and weight data from predictions\nvar heightData=predictions.map(function(entry){return entry.user_data.height[0];});var weightData=predictions.map(function(entry){return entry.user_data.weight[0];});var numPredictions=predictions.length;var stepData=Array.from({length:numPredictions},function(_,i){return i+1;});// Generate an array for the 'step' data\nsetGraphData({height:heightData,weight:weightData,step:stepData});}).catch(function(error){console.error(\"Error fetching data: \",error);});},[]);// Use an effect to create a chart when 'chartRef' changes\nuseEffect(function(){// Get the 2D rendering context of the chart reference\nvar ctx=chartRef.current.getContext(\"2d\");// Create a new line chart using Chart.js\nvar chart=new Chart(ctx,{type:\"line\",data:chartData,// Data for the chart\noptions:chartOptions// Options for the chart\n});// Return a cleanup function to destroy the chart when the component unmounts\nreturn function(){chart.destroy();// Destroy the chart to prevent memory leaks\n};},[chartRef]);// Define the data for the chart\nvar chartData={labels:graphData.step,// X-axis labels, in this case, the 'step' data\ndatasets:[{label:\"Height\",// Label for the first dataset\ndata:graphData.height,// Data for the 'Height' dataset\nborderColor:\"rgba(0, 0, 255, 0.7)\",// Border color for the line\nbackgroundColor:\"rgba(0, 0, 255, 0.3)\"// Fill color for the area under the line\n},{label:\"Weight\",// Label for the second dataset\ndata:graphData.weight,// Data for the 'Weight' dataset\nborderColor:\"rgba(255, 0, 0, 0.7)\",// Border color for the line\nbackgroundColor:\"rgba(255, 0, 0, 0.3)\"// Fill color for the area under the line\n}]};// Define the options for the chart\nvar chartOptions={scales:{x:{type:\"linear\",// X-axis scale type (linear)\ntitle:{display:true,text:\"Step\",// X-axis title\ncolor:\"white\"// Change color to white or any other visible color for dark backgrounds\n}},y:{type:\"linear\",// Y-axis scale type (linear)\nbeginAtZero:true,// Start the Y-axis at zero\ntitle:{display:true,text:\"Value\",// Y-axis title\ncolor:\"white\"// Change color to white or any other visible color for dark backgrounds\n}}},plugins:{legend:{labels:{color:\"black\"// Change legend label color to black or any other color for visibility on dark backgrounds\n}}}};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Line,{ref:chartRef,data:chartData,options:chartOptions})});};export default HWGraph;","map":{"version":3,"names":["React","useEffect","useState","useRef","Line","Chart","jsx","_jsx","HWGraph","_ref","chartRefs","_useState","height","weight","step","_useState2","_slicedToArray","graphData","setGraphData","chartRef","fetch","then","response","json","result","predictions","heightData","map","entry","user_data","weightData","numPredictions","length","stepData","Array","from","_","i","catch","error","console","ctx","current","getContext","chart","type","data","chartData","options","chartOptions","destroy","labels","datasets","label","borderColor","backgroundColor","scales","x","title","display","text","color","y","beginAtZero","plugins","legend","children","ref"],"sources":["D:/Research_Project/Component/Sample/RPT_103/src/components/Growth_Predictor/HeightWeight.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\"; // Import 'useRef'\r\nimport { Line } from \"react-chartjs-2\";\r\nimport Chart from \"chart.js/auto\"; // Note: Using 'auto' will include all necessary components\r\n\r\nconst HWGraph = ({ chartRefs }) => {\r\n  // Initialize state to store graph data with height, weight, and step\r\n  const [graphData, setGraphData] = useState({\r\n    height: [],\r\n    weight: [],\r\n    step: [],\r\n  });\r\n\r\n  // Use useRef to hold a reference to the chart\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch data from your Flask API\r\n    // Update the 'graphData' state with the retrieved data\r\n    fetch(\"http://localhost:5000/predictions\")\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        const predictions = result.predictions;\r\n\r\n        // Extract height and weight data from predictions\r\n        const heightData = predictions.map(\r\n          (entry) => entry.user_data.height[0]\r\n        );\r\n        const weightData = predictions.map(\r\n          (entry) => entry.user_data.weight[0]\r\n        );\r\n        const numPredictions = predictions.length;\r\n        const stepData = Array.from(\r\n          { length: numPredictions },\r\n          (_, i) => i + 1\r\n        );\r\n\r\n        // Generate an array for the 'step' data\r\n        setGraphData({\r\n          height: heightData,\r\n          weight: weightData,\r\n          step: stepData,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching data: \", error);\r\n      });\r\n  }, []);\r\n\r\n  // Use an effect to create a chart when 'chartRef' changes\r\n  useEffect(() => {\r\n    // Get the 2D rendering context of the chart reference\r\n    const ctx = chartRef.current.getContext(\"2d\");\r\n\r\n    // Create a new line chart using Chart.js\r\n    const chart = new Chart(ctx, {\r\n      type: \"line\",\r\n      data: chartData, // Data for the chart\r\n      options: chartOptions, // Options for the chart\r\n    });\r\n\r\n    // Return a cleanup function to destroy the chart when the component unmounts\r\n    return () => {\r\n      chart.destroy(); // Destroy the chart to prevent memory leaks\r\n    };\r\n  }, [chartRef]);\r\n\r\n  // Define the data for the chart\r\n  const chartData = {\r\n    labels: graphData.step, // X-axis labels, in this case, the 'step' data\r\n    datasets: [\r\n      {\r\n        label: \"Height\", // Label for the first dataset\r\n        data: graphData.height, // Data for the 'Height' dataset\r\n        borderColor: \"rgba(0, 0, 255, 0.7)\", // Border color for the line\r\n        backgroundColor: \"rgba(0, 0, 255, 0.3)\", // Fill color for the area under the line\r\n      },\r\n      {\r\n        label: \"Weight\", // Label for the second dataset\r\n        data: graphData.weight, // Data for the 'Weight' dataset\r\n        borderColor: \"rgba(255, 0, 0, 0.7)\", // Border color for the line\r\n        backgroundColor: \"rgba(255, 0, 0, 0.3)\", // Fill color for the area under the line\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Define the options for the chart\r\n  const chartOptions = {\r\n    scales: {\r\n      x: {\r\n        type: \"linear\", // X-axis scale type (linear)\r\n        title: {\r\n          display: true,\r\n          text: \"Step\", // X-axis title\r\n          color: \"white\", // Change color to white or any other visible color for dark backgrounds\r\n        },\r\n      },\r\n      y: {\r\n        type: \"linear\", // Y-axis scale type (linear)\r\n        beginAtZero: true, // Start the Y-axis at zero\r\n        title: {\r\n          display: true,\r\n          text: \"Value\", // Y-axis title\r\n          color: \"white\", // Change color to white or any other visible color for dark backgrounds\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          color: \"black\", // Change legend label color to black or any other color for visibility on dark backgrounds\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Line ref={chartRef} data={chartData} options={chartOptions} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HWGraph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}